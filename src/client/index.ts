// TODO: set up config for all magic variables.
// Set up matrix client here
import { MatrixClient } from "matrix-js-sdk/src/client";
import { MatrixEvent } from "../model";
import { RequestContext } from "../context";
import { RequestContextGenerator } from "../context/contextGenerator";


export interface MatrixEventListener {
    handle(event: MatrixEvent, context: RequestContext): Promise<void>;
}

/*
* Handles networking abstractions on Matrix client.
*/
export class MatrixBotClient {
    constructor(
        public readonly matrixClient: MatrixClient,
        private readonly requestContextGenerator: RequestContextGenerator
    ) { }

    public addEventListener(handler: MatrixEventListener): void {
        this.matrixClient.on('event', (rawEvent) => {
            try {
                const event = this.convertRawEventToMatrixEvent(rawEvent);
                const requestContext = this.requestContextGenerator.getContext();
                handler.handle(event, requestContext);
            } catch (error) {
                console.log('Something went wrong while handling event', rawEvent, error);
            }
        });
    }

    public async sendMessage(roomId: string, message: string) {
        const content = {
            body: message,
            msgtype: "m.text"
        };
        await this.matrixClient.sendEvent(
            roomId,
            "m.room.message",
            content, ""
        );
    }

    public async initialize() {
        await this.matrixClient.startClient({initialSyncLimit: 0});
    }

    private convertRawEventToMatrixEvent(rawEvent: any): MatrixEvent {
        // Ideally we just use the schemas generated by json-schema-to-typescript
        return rawEvent.event as MatrixEvent;
    }
}
